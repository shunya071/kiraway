{%- if cart != empty -%}
  <div class="cart" data-cart>
    <h1 class="cart-title">Your Cart</h1>
    
    <div class="cart-layout">
      <!-- カート商品リスト -->
      <div class="cart-items-container">
        <form action="{{ routes.cart_url }}" method="post" novalidate class="cart-form">
          {% for item in cart.items %}
            <div class="cart-item" data-cart-item="{{ item.key }}">
              <div class="cart-item__image">
                <img src="{{ item | img_url: '120x' }}" alt="{{ item.title | escape }}">
              </div>
              
              <div class="cart-item__details">
                <div class="cart-item__details-top">
                  <h2><a href="{{ item.url }}">{{ item.product.title }}</a></h2>
                  {% if item.product.has_only_default_variant == false %}
                    <p class="cart-item__variant">{{ item.variant.title }}</p>
                  {% endif %}
                  <div class="cart-item__price">{{ item.price | money }}</div>
                </div>
                
                <div class="cart-item__controls">
                  <quantity-input class="quantity-input" data-item-key="{{ item.key }}">
                    <button type="button" name="minus" class="quantity__button">-</button>
                    <input type="number" 
                           name="updates[]" 
                           value="{{ item.quantity }}" 
                           min="0"
                           data-index="{{ forloop.index }}"
                           data-item-key="{{ item.key }}"
                           class="quantity-input__input"
                           readonly
                    >
                    <button type="button" name="plus" class="quantity__button">+</button>
                  </quantity-input>
                  
                  <button type="button" 
                          class="remove-button" 
                          data-item-key="{{ item.key }}"
                          data-item-title="{{ item.title }}"
                          onclick="showDeleteConfirmModal(this)">
                    <img src="{{ 'trash.png' | asset_url }}" alt="ゴミ箱アイコン" width="20" height="20px">
                    削除
                  </button>
                </div>
              </div>
{% comment %}               
              <div class="cart-item__total">
                {{ item.final_line_price | money }}
              </div> {% endcomment %}
            </div>
          {% endfor %}
        </form>
      </div>

      <!-- サイドバー（合計金額とチェックアウト） -->
      <div class="cart-sidebar">
        <div class="cart-summary">
          <!-- 小計 -->
          <div class="cart-summary__row">
            <span>小計</span>
            <strong>{{ cart.items_subtotal_price | money }}</strong>
          </div>

          <!-- 送料 -->
          <div class="cart-summary__row">
            <span>送料</span>
            {% if cart.total_price >= 5000 %}
              <strong class="shipping-free">無料</strong>
            {% else %}
              {% assign remaining_for_free = 5000 | minus: cart.total_price %}
              <div class="shipping-info">
                <strong>￥800</strong>
                <small>あと{{ remaining_for_free | money }}のお買い物で送料無料</small>
              </div>
            {% endif %}
          </div>

          <!-- 消費税 -->
          {% comment %} <div class="cart-summary__row">
            <span>消費税（10%）</span>
            <strong>{{ cart.tax_price | money }}</strong>
          </div>

          <!-- 合計（太線で区切る） -->
          <div class="cart-summary__row cart-summary__row--total">
            <span>合計</span>
            <strong>{{ cart.total_price | money }}</strong>
          </div>
           {% endcomment %}
          <button type="submit" name="checkout" class="checkout-button">
            購入手続きへ
          </button>

          <!-- 安心の表示 -->
          <div class="cart-summary__security">
            <div class="security-item">
              <span class="icon">🔒</span>
              <small>安全な決済</small>
            </div>
            <div class="security-item">
              <span class="icon">📦</span>
              <small>安心の配送</small>
            </div>
          </div>
        </div>
      </div>

      <div class="cart-suggestions">
        <h2 class="cart-suggestions-title">おすすめの関連商品</h2>
        <div class="suggestions-list">
          {% for item in cart.items %}
            {% assign complementary_products = item.product.metafields.custom.complementary_products %}
            {% if complementary_products != blank %}
              {% for complementary in complementary_products %}
                <div class="suggestion-item">
                  <img src="{{ complementary | img_url: '100x' }}" alt="{{ complementary.title }}">
                  <div class="suggestion-details">
                    <h3>{{ complementary.title }}</h3>
                    <p>{{ complementary.price | money }}</p>
                    <button class="add-suggestion" data-variant-id="{{ complementary.first_available_variant.id }}">
                      カートに追加
                    </button>
                  </div>
                </div>
              {% endfor %}
            {% endif %}
          {% endfor %}
        </div>
      </div>
    </div>
  </div>
  
  {%- else -%}
  <div class="empty-cart">
    <p>カートに商品がありません</p>
    <a href="/" class="continue-shopping">買い物を続ける</a>
  </div>
  {%- endif -%}
  
  <!-- 確認モーダル -->
  <div id="deleteConfirmModal" class="modal">
    <div class="modal-content">
      <p class="modal-message"></p>
      <div class="modal-buttons">
        <button type="button" class="modal-button modal-button--cancel" onclick="hideDeleteConfirmModal()">いいえ</button>
        <button type="button" class="modal-button modal-button--confirm" onclick="confirmDelete()">はい</button>
      </div>
    </div>
  </div>
  
  <script>
  document.addEventListener('DOMContentLoaded', function() {
    // カートのUI更新関数
    function updateCartUI(cartData) {
      // 商品数量の更新
      document.querySelectorAll('[data-cart-item]').forEach(item => {
        const itemKey = item.dataset.cartItem;
        const itemInCart = cartData.items.find(i => i.key === itemKey);
        
        if (!itemInCart) {
          // 商品が削除された場合、要素を削除
          item.remove();
        }
      });

      // 合計金額の更新
      const subtotalElement = document.querySelector('[data-cart-subtotal]');
      if (subtotalElement) {
        subtotalElement.innerHTML = formatMoney(cartData.items_subtotal_price);
      }

      // 消費税の更新
      const taxElement = document.querySelector('[data-cart-tax]');
      if (taxElement) {
        taxElement.innerHTML = formatMoney(cartData.tax_price);
      }

      // 最終合計の更新
      const totalElement = document.querySelector('[data-cart-total]');
      if (totalElement) {
        totalElement.innerHTML = formatMoney(cartData.total_price);
      }

      // 送料の更新
      const shippingElement = document.querySelector('[data-cart-shipping]');
      if (shippingElement) {
        if (cartData.total_price >= 5000) {
          shippingElement.innerHTML = '<strong class="shipping-free">無料</strong>';
        } else {
          const remaining = 5000 - cartData.total_price;
          shippingElement.innerHTML = `
            <div class="shipping-info">
              <strong>￥800</strong>
              <small>あと${formatMoney(remaining)}のお買い物で送料無料</small>
            </div>
          `;
        }
      }

      // カートが空の場合の処理
      if (cartData.item_count === 0) {
        location.reload(); // カートが空になった場合はページをリロード
      }
    }

    // 金額のフォーマット関数
    function formatMoney(cents) {
      return '¥' + (cents / 100).toFixed(0).replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1,');
    }

    let currentItemKey = null;
    let isConfirmationOpen = false; // モーダル表示状態を管理

    function showDeleteConfirmModal(button) {
      // モーダルを開く時点で自動更新をキャンセル
      isConfirmationOpen = true;
      
      const itemTitle = button.dataset.itemTitle;
      currentItemKey = button.dataset.itemKey;
      
      const modal = document.getElementById('deleteConfirmModal');
      const message = modal.querySelector('.modal-message');
      message.textContent = `「${itemTitle}」を削除してもよろしいですか？`;
      
      modal.classList.add('show');
      
      // モーダル外クリックで閉じる
      modal.addEventListener('click', function(e) {
        if (e.target === modal) {
          hideDeleteConfirmModal();
        }
      });
    }

    function hideDeleteConfirmModal() {
      const modal = document.getElementById('deleteConfirmModal');
      modal.classList.remove('show');
      currentItemKey = null;
      isConfirmationOpen = false; // モーダルを閉じたらフラグをリセット
    }

    function confirmDelete() {
      if (currentItemKey) {
        handleQuantityChange(currentItemKey, 0);
        hideDeleteConfirmModal();
      }
    }

    // 数量変更の処理を修正
    function handleQuantityChange(itemKey, newQuantity) {
      // 削除確認モーダルが表示中の場合は処理をスキップ
      if (isConfirmationOpen && newQuantity === 0) {
        return;
      }

      const formData = {
        updates: {
          [itemKey]: newQuantity
        },
        sections: ['cart-template']
      };

      fetch('{{ routes.cart_update_url }}', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData)
      })
      .then(response => response.json())
      .then(data => {
        fetch('{{ routes.cart_url }}.js')
          .then(response => response.json())
          .then(cartData => {
            updateCartUI(cartData);
          });
      })
      .catch(error => {
        console.error('Error:', error);
        location.reload();
      });
    }

    // 数量入力の監視
    document.querySelectorAll('.quantity-input input').forEach(input => {
      let timeout;
      input.addEventListener('change', function() {
        const itemKey = this.dataset.itemKey;
        const newValue = parseInt(this.value);
        
        // 入力値の検証
        if (newValue >= 0) {
          clearTimeout(timeout);
          timeout = setTimeout(() => {
            handleQuantityChange(itemKey, newValue);
          }, 200); // 500ms後に更新を実行
        }
      });
    });

    // プラス/マイナスボタンの処理
    document.querySelectorAll('.quantity__button').forEach(button => {
      button.addEventListener('click', function() {
        const input = this.parentNode.querySelector('input');
        const itemKey = input.dataset.itemKey;
        const currentValue = parseInt(input.value);
        
        let newValue = currentValue;
        if (this.name === 'minus' && currentValue > 0) {
          newValue = currentValue - 1;
        } else if (this.name === 'plus') {
          newValue = currentValue + 1;
        }

        input.value = newValue; // 入力値を即時更新
        handleQuantityChange(itemKey, newValue);
      });
    });

    // 削除ボタンの処理
    document.querySelectorAll('.remove-button').forEach(button => {
      button.addEventListener('click', function() {
        const itemKey = this.dataset.itemKey;
        handleQuantityChange(itemKey, 0);
      });
    });

    // 関連商品の追加処理
    document.querySelectorAll('.add-suggestion').forEach(button => {
      button.addEventListener('click', function() {
        const variantId = this.dataset.variantId;
        const formData = new FormData();
        formData.append('id', variantId);
        formData.append('quantity', 1);

        fetch('{{ routes.cart_add_url }}', {
          method: 'POST',
          body: formData
        })
        .then(response => response.json())
        .then(cart => {
          updateCartUI(cart);
        })
        .catch(error => console.error('Error:', error));
      });
    });
  });

  // ESCキーでモーダルを閉じる
  document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') {
      hideDeleteConfirmModal();
    }
  });
  </script>
  
  {% style %}
  .cart-title {
    text-align: center;
    font-size: 2rem;
    font-weight: bold;
    margin-top: 2rem;
  }
  .cart-layout {
    display: grid;
    grid-template-columns: 1fr 350px;
    gap: 2rem;
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
  }
  
  .cart-item {
    display: grid;
    grid-template-columns: 120px 1fr auto;
    gap: 1.5rem;
    padding: 1.5rem;
    border-bottom: 1px solid #eee;
  }
  
  .cart-item__details {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }
  
  .cart-sidebar {
    position: sticky;
    top: 2rem;
    background: #f9f9f9;
    padding: 1.5rem;
    border-radius: 8px;
  }
  
  .cart-suggestions {
    margin-top: 2rem;
  }
  
  .suggestions-list {
    display: grid;
    gap: 1rem;
    margin-top: 1rem;
  }
  
  .suggestion-item {
    display: grid;
    grid-template-columns: 100px 1fr;
    gap: 1rem;
    padding: 1rem;
    background: white;
    border-radius: 4px;
  }
  
  .quantity-input {
    display: flex;
    align-items: center;
    border: 1px solid #ddd;
    border-radius: 4px;
    width: fit-content;
  }
  
  .quantity-input__input {
    /* Chrome, Safari, Edge, Opera 用 */
    -webkit-appearance: none;
    -moz-appearance: textfield;
    appearance: none;
    
    /* 入力欄のスタイル */
    width: 40px;
    text-align: center;
    border: 1px solid #ddd;
    padding: 5px;
    background-color: #fff;
    
    /* カーソルスタイル */
    cursor: default;
  }
  
  /* Firefox用 */
  .quantity-input__input::-webkit-outer-spin-button,
  .quantity-input__input::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }
  
  /* 読み取り専用時の背景色を白に保つ */
  .quantity-input__input:read-only {
    background-color: #fff;
  }
  
  /* プラス/マイナスボタンのスタイル */
  .quantity__button {
    padding: 8px 12px;
    background: none;
    border: none;
    cursor: pointer;
    color: #666;
    transition: background-color 0.2s;
  }
  
  .quantity__button:hover {
    background-color: #f5f5f5;
  }
  
  .remove-button {
    color: #666;
    background: none;
    border: none;
    padding: 0.5rem;
    cursor: pointer;
  }
  
  .checkout-button {
    width: 100%;
    padding: 1rem;
    background: #000;
    color: white;
    border: none;
    border-radius: 4px;
    margin-top: 1rem;
  }
  
  .empty-cart {
    text-align: center;
    padding: 4rem 2rem;
  }
  
  .continue-shopping {
    display: inline-block;
    margin-top: 1rem;
    padding: 0.75rem 1.5rem;
    background: #000;
    color: #fff;
    text-decoration: none;
    border-radius: 4px;
  }

  .quantity__button {
    border: 1px solid #939393;
    text-align: center;
  }
  .quantity-input__input {
    /* Chrome, Safari, Edge, Opera 用 */
    -webkit-appearance: none;
    -moz-appearance: textfield;
    appearance: none;
    
    /* 入力欄のスタイル */
    width: 40px;
    text-align: center;
    border: 1px solid #939393;
    padding: 8px 5px;
    background-color: #fff;
    
    /* カーソルスタイル */
    cursor: default;
  }

  /* Firefox用 */
  .quantity-input__input::-webkit-outer-spin-button,
  .quantity-input__input::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  /* 読み取り専用時の背景色を白に保つ */
  .quantity-input__input:read-only {
    background-color: #fff;
  }

  .cart-item__controls {
    display: flex;
    justify-content: center;
    flex-direction: column;
    gap: 0.5rem;
    width: 40%;
    align-items: flex-end;
  }

  .cart-item__details-top {
    width: 60%
  }

  .cart-item__details-top h2 {
    font-size: 18px;
    padding-bottom: 0.5rem;
  }

  .cart-suggestions-title {
    font-size: 18px;
    padding-bottom: 0.5rem;
  }

  .cart-summary {
    padding: 1.5rem;
    background: #f9f9f9;
    border-radius: 8px;
  }

  .cart-summary__row {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem 0;
    border-bottom: 1px solid #eee;
  }

  .cart-summary__row--total {
    margin-top: 1rem;
    padding-top: 1rem;
    border-top: 2px solid #000;
    font-size: 1.2em;
    font-weight: bold;
  }

  .shipping-free {
    color: #2ecc71;
  }

  .shipping-info {
    text-align: right;
  }

  .shipping-info small {
    display: block;
    color: #666;
    font-size: 0.8em;
    margin-top: 0.25rem;
  }

  .cart-summary__security {
    margin-top: 1.5rem;
    padding-top: 1.5rem;
    border-top: 1px solid #eee;
    display: flex;
    justify-content: space-around;
  }

  .security-item {
    text-align: center;
  }

  .security-item .icon {
    display: block;
    font-size: 1.5em;
    margin-bottom: 0.5rem;
  }

  .security-item small {
    color: #666;
  }

  .checkout-button {
    width: 100%;
    padding: 1rem;
    background: #000;
    color: white;
    border: none;
    border-radius: 4px;
    margin-top: 1.5rem;
    font-weight: bold;
    cursor: pointer;
    transition: background-color 0.3s;
  }

  .checkout-button:hover {
    background: #333;
  }

  .modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 1000;
    
    /* モーダルを中央配置 */
    display: none;
    justify-content: center;
    align-items: center;
  }

  .modal-content {
    background-color: white;
    padding: 2rem;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    max-width: 400px;
    width: 90%;
    text-align: center;
  }

  .modal-message {
    margin-bottom: 1.5rem;
    font-size: 1.1em;
  }

  .modal-buttons {
    display: flex;
    justify-content: center;
    gap: 1rem;
  }

  .modal-button {
    padding: 0.75rem 2rem;
    border-radius: 4px;
    border: none;
    cursor: pointer;
    font-weight: bold;
    transition: background-color 0.2s;
  }

  .modal-button--cancel {
    background-color: #f0f0f0;
    color: #666;
  }

  .modal-button--cancel:hover {
    background-color: #e0e0e0;
  }

  .modal-button--confirm {
    background-color: #ff4444;
    color: white;
  }

  .modal-button--confirm:hover {
    background-color: #ff2222;
  }

  /* モーダル表示アニメーション */
  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }

  .modal.show {
    display: flex;
    animation: fadeIn 0.3s ease-out;
  }
  {% endstyle %}